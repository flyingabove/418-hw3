shiny::runApp('Documents/b-statistics/APP')
runApp('Documents/b-statistics/APP')
runApp('Documents/b-statistics/APP')
runApp('Documents/b-statistics/APP')
runApp('Documents/b-statistics/APP')
runApp('Documents/b-statistics/APP')
runApp('Documents/b-statistics/APP')
runApp('Documents/b-statistics/APP')
runApp('Documents/b-statistics/APP')
pchisq(q=100, df=80, ncp = 0, lower.tail = FALSE, log.p = FALSE)
pi
area =  function(r){
return(pi*r^2)
}
area(20)
?rnorm()
radi<-rnorm(n = 10000, mean = 20,sd=2)
radi
areas<-sapply(radi,area)
mean(area)
area
area(20)
area =  function(r){
return(pi*r^2)
}
area(20)
areas<-sapply(radi,area)
mean(area)
areas<-sapply(radi,area)
areas
areas<-sapply(radi,area)
mean(area)
mean(1)
mean(as.numeric(area))
area
mean(areas)
area(20)
var(areas)
?var
areas
sd(areas)
area(20)
mean(areas)
areas<-sapply(radi,area)
areas
mean(areas)
area(20)
sqrt(sd(areas))
area(20)
mean(areas)-sqrt(sd(areas))
area(20)
radi
hist(radi)
mean(areas)
mean(areas)-4
area(20)
sqrt(sd(areas))
mean(areas)-sqrt(sd(areas))
#Actual Area
area(20)
radi<-rnorm(n = 10000, mean = 20,sd=2)
radi
var(radi)
radi<-rnorm(n = 10000, mean = 20,sd=2)
areas<-sapply(radi,area)
mean(areas)-16
#Actual Area
area(20)
mean(areas)-16
#Actual Area
area(20)
area =  function(r){
return(pi*r^2)
}
radi<-rnorm(n = 10000, mean = 20,sd=2)
area(20)
radi<-rnorm(n = 10000, mean = 20,sd=2)
areas<-sapply(radi,area)
mean(areas)
area(20)
mean(areas)-area(20)
mean(areas)-area(20)
radi<-rnorm(n = 10000, mean = 20,sd=2)
areas<-sapply(radi,area)
mean(areas)
#Actual Area
area(20)
mean(areas)-area(20)
radi<-rnorm(n = 10000, mean = 20,sd=2)
areas<-sapply(radi,area)
mean(areas)
#Actual Area
area(20)
mean(areas)-area(20)
radi<-rnorm(n = 10000, mean = 20,sd=2)
areas<-sapply(radi,area)
mean(areas)
#Actual Area
area(20)
mean(areas)-area(20)
radi<-rnorm(n = 10000, mean = 20,sd=2)
areas<-sapply(radi,area)
mean(areas)
#Actual Area
area(20)
mean(areas)-area(20)
radi<-rnorm(n = 1000000, mean = 20,sd=2)
areas<-sapply(radi,area)
mean(areas)
#Actual Area
area(20)
mean(areas)-area(20)
radi<-rnorm(n = 1000000, mean = 20,sd=2)
areas<-sapply(radi,area)
mean(areas)
#Actual Area
area(20)
mean(areas)-area(20)
radi<-rnorm(n = 10000, mean = 20,sd=2)
radi<-rnorm(n = 100000, mean = 20,sd=2)
areas<-sapply(radi,area)
area(20)
mean(areas)-pi*area(20)
mean(areas)-pi*4
area(20)
mean(areas)-pi*4
#1256.363
?par
par(mfrow = c(2,2))
?rgamma
?rchisq
?rf
hist(rnorm(10000,0,1))
hist(rgamma(10000,0,1))
rchisq(rnorm(10000,1))
hist(rf(10000,1,2
hist(rgamma(10000,1,1))
rchisq(rnorm(10000,1))
hist(rf(10000,1,2
hist(rnorm(10000,0,1))
hist(rf(10000,1,2 ))
hist(rf(10000,4,2 ))
hist(rf(100,5,2 ))
qf(100,5,2 )
hist(rf(100,5,2 ))
hist(rf(100,5,5 ))
rchisq(rnorm(10000,1))
rchisq(rchisq(10000,1))
hist(rchisq(10000,1))
hist(rgamma(10000,1,1))
hist(rnorm(10000,0,1))
par(mfrow = c(2,2))
hist(rnorm(10000,0,1))
hist(rgamma(10000,1,1))
hist(rchisq(10000,1))
hist(rf(100,5,5 ))
par(mfrow = c(2,2))
hist(rnorm(10000,0,1))
hist(rgamma(10000,1,1))
hist(rchisq(10000,1))
hist(rf(100,5,5 ))
pchisq(q=100, df=80, ncp = 0, lower.tail = FALSE, log.p = FALSE)
setwd("~/Documents/MAS/418/Hw4")
##############################
library(h2o)
library(gbm)
library(randomForest)
library(xgboost)
h2o.init(nthreads = -1)
df <- h2o.importFile("data/sentiment_df.csv")
splits_2 <- h2o.splitFrame(
df,           ##  splitting the H2O frame we read above
ratios = .8,   ##  create splits
seed=1234)
train_2 <- h2o.assign(splits_2[[1]], "train.hex")
valid_2 <- h2o.assign(splits_2[[2]], "valid.hex")
gbm_4 <- h2o.gbm(y = "Sentiment", training_frame = train_2, distribution = "bernoulli",
ntrees = 1000, max_depth = 10, learn_rate = 0.02,
nbins = 30, seed = 123,
stopping_rounds=5, stopping_tolerance=0.005,stopping_metric="AUC")
gbm_4
h2o.auc(h2o.performance(gbm_4, newdata = valid_2))
splits <- h2o.splitFrame(df,ratios = c(.6,.2),seed=1234)
train <- h2o.assign(splits[[1]], "train.hex")
valid <- h2o.assign(splits[[2]], "valid.hex")
test <- h2o.assign(splits[[3]], "test.hex")
rf1<-h2o.randomForest(training_frame = train, validation_frame = valid, y="Sentiment",seed=12345,ntrees=200)
rf_base<-rf1
h2o.auc(h2o.performance(rf_base, newdata = valid))

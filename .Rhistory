shiny::runApp('Documents/b-statistics/APP')
runApp('Documents/b-statistics/APP')
runApp('Documents/b-statistics/APP')
runApp('Documents/b-statistics/APP')
runApp('Documents/b-statistics/APP')
runApp('Documents/b-statistics/APP')
runApp('Documents/b-statistics/APP')
runApp('Documents/b-statistics/APP')
runApp('Documents/b-statistics/APP')
pchisq(q=100, df=80, ncp = 0, lower.tail = FALSE, log.p = FALSE)
pi
area =  function(r){
return(pi*r^2)
}
area(20)
?rnorm()
radi<-rnorm(n = 10000, mean = 20,sd=2)
radi
areas<-sapply(radi,area)
mean(area)
area
area(20)
area =  function(r){
return(pi*r^2)
}
area(20)
areas<-sapply(radi,area)
mean(area)
areas<-sapply(radi,area)
areas
areas<-sapply(radi,area)
mean(area)
mean(1)
mean(as.numeric(area))
area
mean(areas)
area(20)
var(areas)
?var
areas
sd(areas)
area(20)
mean(areas)
areas<-sapply(radi,area)
areas
mean(areas)
area(20)
sqrt(sd(areas))
area(20)
mean(areas)-sqrt(sd(areas))
area(20)
radi
hist(radi)
mean(areas)
mean(areas)-4
area(20)
sqrt(sd(areas))
mean(areas)-sqrt(sd(areas))
#Actual Area
area(20)
radi<-rnorm(n = 10000, mean = 20,sd=2)
radi
var(radi)
radi<-rnorm(n = 10000, mean = 20,sd=2)
areas<-sapply(radi,area)
mean(areas)-16
#Actual Area
area(20)
mean(areas)-16
#Actual Area
area(20)
area =  function(r){
return(pi*r^2)
}
radi<-rnorm(n = 10000, mean = 20,sd=2)
area(20)
radi<-rnorm(n = 10000, mean = 20,sd=2)
areas<-sapply(radi,area)
mean(areas)
area(20)
mean(areas)-area(20)
mean(areas)-area(20)
radi<-rnorm(n = 10000, mean = 20,sd=2)
areas<-sapply(radi,area)
mean(areas)
#Actual Area
area(20)
mean(areas)-area(20)
radi<-rnorm(n = 10000, mean = 20,sd=2)
areas<-sapply(radi,area)
mean(areas)
#Actual Area
area(20)
mean(areas)-area(20)
radi<-rnorm(n = 10000, mean = 20,sd=2)
areas<-sapply(radi,area)
mean(areas)
#Actual Area
area(20)
mean(areas)-area(20)
radi<-rnorm(n = 10000, mean = 20,sd=2)
areas<-sapply(radi,area)
mean(areas)
#Actual Area
area(20)
mean(areas)-area(20)
radi<-rnorm(n = 1000000, mean = 20,sd=2)
areas<-sapply(radi,area)
mean(areas)
#Actual Area
area(20)
mean(areas)-area(20)
radi<-rnorm(n = 1000000, mean = 20,sd=2)
areas<-sapply(radi,area)
mean(areas)
#Actual Area
area(20)
mean(areas)-area(20)
radi<-rnorm(n = 10000, mean = 20,sd=2)
radi<-rnorm(n = 100000, mean = 20,sd=2)
areas<-sapply(radi,area)
area(20)
mean(areas)-pi*area(20)
mean(areas)-pi*4
area(20)
mean(areas)-pi*4
#1256.363
?par
par(mfrow = c(2,2))
?rgamma
?rchisq
?rf
hist(rnorm(10000,0,1))
hist(rgamma(10000,0,1))
rchisq(rnorm(10000,1))
hist(rf(10000,1,2
hist(rgamma(10000,1,1))
rchisq(rnorm(10000,1))
hist(rf(10000,1,2
hist(rnorm(10000,0,1))
hist(rf(10000,1,2 ))
hist(rf(10000,4,2 ))
hist(rf(100,5,2 ))
qf(100,5,2 )
hist(rf(100,5,2 ))
hist(rf(100,5,5 ))
rchisq(rnorm(10000,1))
rchisq(rchisq(10000,1))
hist(rchisq(10000,1))
hist(rgamma(10000,1,1))
hist(rnorm(10000,0,1))
par(mfrow = c(2,2))
hist(rnorm(10000,0,1))
hist(rgamma(10000,1,1))
hist(rchisq(10000,1))
hist(rf(100,5,5 ))
par(mfrow = c(2,2))
hist(rnorm(10000,0,1))
hist(rgamma(10000,1,1))
hist(rchisq(10000,1))
hist(rf(100,5,5 ))
pchisq(q=100, df=80, ncp = 0, lower.tail = FALSE, log.p = FALSE)
setwd("~/Documents/MAS/418/Hw4")
library(h2o)
h2o.init(nthreads = -1)
df <- h2o.importFile("data/sentiment_df.csv")
splits <- h2o.splitFrame(df,ratios = c(.8,.1),seed=1234)
train <- h2o.assign(splits[[1]], "train.hex")
valid <- h2o.assign(splits[[2]], "valid.hex")
test <- h2o.assign(splits[[3]], "test.hex")
system.time({
glm_1 <- h2o.glm(y = "Sentiment", training_frame = train, validation_frame = valid,
family = "binomial", alpha = 1, lambda = .6)
})
h2o.auc(h2o.performance(glm_1, test))
system.time({
glm_base <- h2o.glm(y = "Sentiment", training_frame = train, validation_frame = valid,
family = "binomial", alpha = 1, lambda = 0)
})
h2o.auc(h2o.performance(glm_base, test))
system.time({
glm_1 <- h2o.glm(y = "Sentiment", training_frame = train, validation_frame = valid,
family = "binomial", alpha = 1, lambda = .1)
})
h2o.auc(h2o.performance(glm_1, test))
system.time({
glm_2 <- h2o.glm(y = "Sentiment", training_frame = train, validation_frame = valid,
family = "binomial", alpha = 1, lambda = .6)
})
h2o.auc(h2o.performance(glm_2, test))
### High Lambda ###
system.time({
glm_2 <- h2o.glm(y = "Sentiment", training_frame = train, validation_frame = valid,
family = "binomial", alpha = 1, lambda = .4)
})
h2o.auc(h2o.performance(glm_2, test))
system.time({
glm_1 <- h2o.glm(y = "Sentiment", training_frame = train, validation_frame = valid,
family = "binomial", alpha = 1, lambda = .1)
})
h2o.auc(h2o.performance(glm_1, test))
system.time({
glm_1 <- h2o.glm(y = "Sentiment", training_frame = train, validation_frame = valid,
family = "binomial", alpha = 1, lambda = .05)
})
h2o.auc(h2o.performance(glm_1, test))
system.time({
glm_1 <- h2o.glm(y = "Sentiment", training_frame = train, validation_frame = valid,
family = "binomial", alpha = 1, lambda = .01)
})
h2o.auc(h2o.performance(glm_1, test))
system.time({
glm_1 <- h2o.glm(y = "Sentiment", training_frame = train, validation_frame = valid,
family = "binomial", alpha = 1, lambda = 0)
})
h2o.auc(h2o.performance(glm_1, test))
system.time({
glm_1 <- h2o.glm(y = "Sentiment", training_frame = train, validation_frame = valid,
family = "binomial", alpha = 1, lambda = 0.001)
})
h2o.auc(h2o.performance(glm_1, test))
system.time({
rf4<-h2o.randomForest(training_frame = train, validation_frame = valid, y="Sentiment",seed=12345,ntrees=200,mtries=10)
})
h2o.auc(h2o.performance(rf4, newdata = valid))
h2o.auc(h2o.performance(rf4, newdata = test))
system.time({
rf5<-h2o.randomForest(training_frame = train, validation_frame = valid, y="Sentiment",seed=12345,ntrees=200,mtries=4)
})
h2o.auc(h2o.performance(rf5, newdata = test))
rf_pred_5<-h2o.predict(object = rf5, newdata = test)
rf_pred_5
h2o.hit_ratio_table(rf5,valid = T)[1,2]             ## validation set accuracy
valid
h2o.hit_ratio_table(rf5,valid = T)[1,2]             ## validation set accuracy
mean(rf_pred_5$predict==test$Cover_Type)
mean(rf_pred_5$predict==test$Sentiment)
mean(rf_pred_5$predict==test$Sentiment)
h2o.hit_ratio_table(rf1,valid = T)[1,2]             ## validation set accuracy
h2o.hit_ratio_table(rf4,valid = T)[1,2]             ## validation set accuracy
h2o.hit_ratio_table(rf4,valid = T)[1]             ## validation set accuracy
mean(rf_pred_1$predict==test$Sentiment)
mean(rf_pred_1$predict==test$Sentiment)
mean(rf_pred_5$predict==test$Sentiment)
system.time({
glm_2 <- h2o.glm(y = "Sentiment", training_frame = train, validation_frame = valid,
family = "binomial", alpha = 1, lambda = .4)
})
h2o.auc(h2o.performance(glm_2, test))
system.time({
glm_1 <- h2o.glm(y = "Sentiment", training_frame = train, validation_frame = valid,
family = "binomial", alpha = 1, lambda = 0.001)
})
h2o.auc(h2o.performance(glm_1, test))
sentiment_df <- read.csv("data/sentiment_df.csv")
set.seed(123)
N <- nrow(sentiment_df)
idx <- sample(1:N, 0.8*N)
d_train <- sentiment_df[idx,]
d_test <- sentiment_df[-idx,]
glm_r <- glm(Sentiment ~ ., data = d_train, family = "binomial")
summary(mylogit)
summary(glm_r)
prob=predict(mylogit,type=c("response"))
prob=predict(glm_r,type=c("response"))
mydata$prob=prob
prob=predict(glm_r,type=c("response"))
prob
library(pROC)
install.packages("pROC")
roccurve <- roc(admit ~ prob, data = d_test)
prob=predict(glm_r,type=c("response"))
library(pROC)
roccurve <- roc(admit ~ prob, data = d_test)
roccurve <- roc(Sentiment ~ prob, data = sentiment_df)
prob
roccurve <- roc(Sentiment ~ prob, data = d_test)
roccurve <- roc(Sentiment ~ ., data = d_test)
prob=predict(glm_r,type=c("response"))
prob
glm_r
roccurve <- roc(Sentiment ~ prob, data = d_test)
roccurve <- roc(Sentiment ~ prob, data = d_train)
glm_r <- glm(Sentiment ~ ., data = d_train, family = "binomial")
glm_r
prob=predict(glm_r,type=c("response"))
prob
d_train$prob = prob
?predict
prob=predict(glm_r,type="response")
prob
prob=predict(glm_r,type="terms")
prob
d_train
nrow(d_train)
glm_r
prob=predict(glm_r,type="terms")
prob
prob=predict(glm_r,type="response")
prob
?randomForest
?randomForest
library(randomForest)
?randomForest
model <- randomForest(Sentiment ~ . , data = sentiment_df, ntree=200)
model <- randomForest(Sentiment ~ . , data = sentiment_df, na.action =na.roughfix, ntree=200)
names(sentiment_df)
model <- randomForest(Sentiment ~ neg_word_count + pos_word_count + deg_word_count + emoji_1 +
emoji_2 + emoji_count + punct1 + punct2 +punct_count, data = sentiment_df,
na.action =na.roughfix, ntree=200)
model <- randomForest(Sentiment ~ neg_word_count + pos_word_count + deg_word_count +
emoji_count + punct1 + punct2 +punct_count, data = sentiment_df,
na.action =na.roughfix, ntree=200)
model <- randomForest(Sentiment ~ neg_word_count + punct_count, data = sentiment_df,
na.action =na.roughfix, ntree=1)
model <- randomForest(Sentiment ~ neg_word_count  +punct_count, data = sentiment_df,
na.action =na.roughfix, ntree=1)
model <- randomForest(Sentiment ~ neg_word_count + pos_word_count + deg_word_count + emoji_count + punct1 + punct2 +punct_count, data = sentiment_df,
na.action =na.roughfix, ntree=1)
model <- randomForest(Sentiment ~ neg_word_count + pos_word_count + deg_word_count + punct1 + punct2 +punct_count, data = sentiment_df,
na.action =na.roughfix, ntree=1)
model <- randomForest(Sentiment ~ neg_word_count + pos_word_count + deg_word_count +punct_count, data = sentiment_df,
na.action =na.roughfix, ntree=1)
model <- randomForest(Sentiment ~ neg_word_count + pos_word_count + deg_word_count +
emoji_count +punct_count, data = sentiment_df,
na.action =na.roughfix, ntree=1)
auc
prob=predict(model,type=c("response"))
prob
model
summary(model)
prob=predict(model,type=c("response"))
sentiment_df$prob=prob
library(pROC)
g <- roc(Sentiment ~ prob, data = mydata)
g <- roc(Sentiment ~ prob, data = sentiment_df)
prob
Table(prob)
sentiment_df$probs=prob
g <- roc(Sentiment ~ probs, data = sentiment_df)
auc
?auc
probs
model
View(sentiment_df)
system.time({
glm_1 <- h2o.glm(y = "Sentiment", training_frame = train, validation_frame = valid,
family = "binomial", alpha = 1, lambda = 0.001)
})
auc(roccurve)
roccurve <- roc(Sentiment ~ prob, data = d_test)
?h2o.gbm
?h2o.gbm
plot(h2o.performance(glm_base, test))
?h2o.performance
plot(h2o.performance(glm_base, test))
glm_base
h2o.auc(h2o.performance(glm_base, test))
plot(h2o.performance(glm_base, test),col = "red")
plot(h2o.performance(glm_base, test),col = "red",main = "True Positive vs False Positive Logistic Reg")
gbm_4
splits_2 <- h2o.splitFrame(
df,           ##  splitting the H2O frame we read above
ratios = .8,   ##  create splits
seed=1234)
train_2 <- h2o.assign(splits_2[[1]], "train.hex")
valid_2 <- h2o.assign(splits_2[[2]], "valid.hex")
gbm_4 <- h2o.gbm(y = "Sentiment", training_frame = train_2, distribution = "bernoulli",
ntrees = 400, max_depth = 10, learn_rate = 0.02,
nbins = 30, seed = 123,
stopping_rounds=5, stopping_tolerance=0.005,stopping_metric="AUC")
System.time({gbm_4 <- h2o.gbm(y = "Sentiment", training_frame = train_2, distribution = "bernoulli",
ntrees = 400, max_depth = 10, learn_rate = 0.02,
nbins = 30, seed = 123,
stopping_rounds=5, stopping_tolerance=0.005,stopping_metric="AUC")})
system.time({gbm_4 <- h2o.gbm(y = "Sentiment", training_frame = train_2, distribution = "bernoulli",
ntrees = 400, max_depth = 10, learn_rate = 0.02,
nbins = 30, seed = 123,
stopping_rounds=5, stopping_tolerance=0.005,stopping_metric="AUC")})
h2o.auc(h2o.performance(gbm_4, newdata = valid_2))
plot(h2o.performance(gbm_4, newdata = valid_2),col = "blue",main = "True Positives vs False Positives GBM")
?gbm_base
?h2o.gbm
h2o.auc(h2o.performance(gbm_base, newdata = valid))
gbm_base<-h2o.gbm(y = "Sentiment", training_frame = train)
gbm_base
h2o.auc(h2o.performance(gbm_base, newdata = valid))
View(sentiment_df)
?h2o.randomForest
plot(h2o.performance(rf5, newdata = test))
plot(h2o.performance(rf5, newdata = test),col = "purple")
plot(h2o.performance(rf5, newdata = test),col = "purple",main ="True Positive vs False Positive RF")
